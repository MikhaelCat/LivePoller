name: 🚀 PollLive — Full CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
    # 1. 🧹 Линтинг и форматирование
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          # Устанавливаем основные зависимости и stub-пакеты для mypy
          pip install -r backend/requirements.txt
          # Устанавливаем ruff и mypy
          pip install ruff mypy
          # Устанавливаем недостающие stub-пакеты (на случай, если забыли в requirements.txt)
          # mypy --install-types --non-interactive

      - name: Run linters (fix and check)
        run: |
          # Исправляем базовые проблемы (I001, F401, W291 и т.д.)
          ruff check backend/ --fix
          ruff format backend/

          # Финальная проверка - если упадет, значит, кто-то не запустил форматирование локально
          ruff check backend/
          ruff format backend/ --check
          
          # Проверка типов с mypy (убедитесь, что __init__.py созданы и папки переименованы)
          mypy backend/
          
  # 2. 🧪 Unit-тесты
  test-unit:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r backend/requirements.txt
          cd backend && pip install -e .

      - name: Run unit tests
        run: |
          cd backend
          pytest tests/unit/ --cov=api --cov-report=xml --cov-report=term

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: unittests

  # 3. 🧩 Integration-тесты (с PostgreSQL, Redis, RabbitMQ)
  test-integration:
    needs: test-unit
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_poll_live
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          pip install -r backend/requirements.txt
          cd backend && pip install -e .

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql+asyncpg://testuser:testpass@localhost:5432/test_poll_live
          REDIS_URL: redis://localhost:6379
          RABBITMQ_URL: amqp://guest:guest@localhost:5672//
        run: |
          cd backend
          pytest tests/integration/ -v --tb=short

  # 4. 🌐 E2E тесты (Playwright)
  test-e2e:
    needs: test-integration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Python deps
        run: |
          pip install -r backend/requirements.txt
          cd backend && pip install -e .

      - name: Install frontend deps and build
        working-directory: frontend
        run: |
          npm install
          npm run build

      - name: Start services
        run: |
          docker-compose -f docker-compose.ci.yml up -d
          sleep 20  # Wait for services to be ready

      - name: Install Playwright
        run: |
          pip install playwright pytest-playwright
          python -m playwright install chromium

      - name: Run E2E tests
        run: |
          cd backend
          pytest tests/e2e/ -v

      - name: Stop services
        if: always()
        run: |
          docker-compose -f docker-compose.ci.yml down

  # 5. 🐳 Сборка и публикация Docker
  build-docker:
    needs: test-e2e
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU (multi-platform)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/polllive-backend
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # 6. 🖥️ Сборка Electron (.exe и AppImage)
  build-electron:
    needs: build-docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd desktop
          npm install

      - name: Build Windows .exe
        run: |
          cd desktop
          npm run package-win

      - name: Build Linux AppImage
        run: |
          cd desktop
          npm run package-linux

      - name: Upload desktop builds
        uses: actions/upload-artifact@v3
        with:
          name: polllive-desktop-builds
          path: desktop/build/

  # 7. 🚀 Деплой в production
  deploy:
    needs: [build-docker, build-electron]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download desktop builds
        uses: actions/download-artifact@v3
        with:
          name: polllive-desktop-builds
          path: releases/desktop/

      - name: Deploy to Kubernetes
        if: github.ref == 'refs/heads/main'
        env:
          KUBECONFIG: ./kubeconfig.yml
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" > $KUBECONFIG
          helm upgrade --install polllive ./polllive-chart \
            --set image.repository=${{ secrets.DOCKERHUB_USERNAME }}/polllive-backend \
            --set image.tag=${{ github.sha }} \
            --set replicaCount=3

      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            releases/desktop/*.exe
            releases/desktop/*.AppImage
          generate_release_notes: true
